[pytest]
# Use automatic asyncio mode
asyncio_mode = auto

# Set default fixture loop scope
asyncio_default_fixture_loop_scope = function

# Test categorization markers
markers = 
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests as fast
    benchmark: marks tests as benchmarks
    llm: marks tests that interact with LLM services
    hallucination: marks hallucination detection tests
    multimodal: marks multimodal input tests
    prompt_engineering: marks prompt engineering tests
    semantic: marks semantic consistency tests
    stress: marks stress tests

# Pytest and plugin options
addopts = 
    -n auto --dist loadscope  # Parallel testing
    --benchmark-columns=min,max,mean,stddev --benchmark-sort=mean --benchmark-compare  # Benchmark settings
    --timeout=300 --timeout_method=thread  # Test timeout
    --testmon  # Incremental testing
    --cov=src --cov-report=term-missing --cov-report=html --cov-fail-under=90 --cov-config=.coveragerc  # Coverage settings
    -W default::ResourceWarning  # Show ResourceWarnings without failing tests

# Warning filters
filterwarnings =
    error
    default::DeprecationWarning
    default::PendingDeprecationWarning

# Global timeout (in seconds)
timeout = 300
